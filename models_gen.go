// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package go_graphql

import (
	"fmt"
	"io"
	"strconv"
)

type NewUser struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type NewVideo struct {
	Name          string `json:"name"`
	Description   string `json:"description"`
	UserID        int    `json:"userId"`
	URL           string `json:"url"`
	ScreenshotIds []*int `json:"screenshotIds"`
	RelatedIds    []*int `json:"relatedIds"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
	RoleTest  Role = "TEST"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
	RoleTest,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser, RoleTest:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
